# uncompyle6 version 3.3.5
# Python bytecode 3.7 (3394)
# Decompiled from: Python 2.7.16 (default, Mar  4 2019, 09:02:22) 
# [GCC 4.2.1 Compatible Apple LLVM 10.0.0 (clang-1000.11.45.5)]
# Embedded file name: stringprep.py
"""Library that exposes various tables found in the StringPrep RFC 3454.

There are two kinds of tables: sets, for which a member test is provided,
and mappings, for which a mapping function is provided.
"""
from unicodedata import ucd_3_2_0 as unicodedata
if not unicodedata.unidata_version == '3.2.0':
    raise AssertionError

def in_table_a1(code):
    if unicodedata.category(code) != 'Cn':
        return False
    else:
        c = ord(code)
        if not 64976 <= c < 65008:
            return False
        return c & 65535 not in (65534, 65535)


b1_set = set([173, 847, 6150, 6155, 6156, 6157, 8203, 8204, 8205, 8288, 65279] + list(range(65024, 65040)))

def in_table_b1(code):
    return ord(code) in b1_set


b3_exceptions = {181:u'\u03bc', 
 223:'ss',  304:u'i\u0307',  329:u'\u02bcn',  383:'s', 
 496:u'j\u030c',  837:u'\u03b9',  890:u' \u03b9',  912:u'\u03b9\u0308\u0301', 
 944:u'\u03c5\u0308\u0301',  962:u'\u03c3',  976:u'\u03b2',  977:u'\u03b8', 
 978:u'\u03c5',  979:u'\u03c5\u0301',  980:u'\u03c5\u0308',  981:u'\u03c6', 
 982:u'\u03c0',  1008:u'\u03ba',  1009:u'\u03c1',  1010:u'\u03c3', 
 1013:u'\u03b5',  1415:u'\u0565\u0582',  7830:u'h\u0331',  7831:u't\u0308', 
 7832:u'w\u030a',  7833:u'y\u030a',  7834:u'a\u02be',  7835:u's\u0307', 
 8016:u'\u03c5\u0313',  8018:u'\u03c5\u0313\u0300',  8020:u'\u03c5\u0313\u0301',  8022:u'\u03c5\u0313\u0342', 
 8064:u'\u03b1\u0313\u03b9',  8065:u'\u03b1\u0314\u03b9',  8066:u'\u03b1\u0313\u0300\u03b9',  8067:u'\u03b1\u0314\u0300\u03b9', 
 8068:u'\u03b1\u0313\u0301\u03b9',  8069:u'\u03b1\u0314\u0301\u03b9',  8070:u'\u03b1\u0313\u0342\u03b9',  8071:u'\u03b1\u0314\u0342\u03b9', 
 8072:u'\u03b1\u0313\u03b9',  8073:u'\u03b1\u0314\u03b9',  8074:u'\u03b1\u0313\u0300\u03b9',  8075:u'\u03b1\u0314\u0300\u03b9', 
 8076:u'\u03b1\u0313\u0301\u03b9',  8077:u'\u03b1\u0314\u0301\u03b9',  8078:u'\u03b1\u0313\u0342\u03b9',  8079:u'\u03b1\u0314\u0342\u03b9', 
 8080:u'\u03b7\u0313\u03b9',  8081:u'\u03b7\u0314\u03b9',  8082:u'\u03b7\u0313\u0300\u03b9',  8083:u'\u03b7\u0314\u0300\u03b9', 
 8084:u'\u03b7\u0313\u0301\u03b9',  8085:u'\u03b7\u0314\u0301\u03b9',  8086:u'\u03b7\u0313\u0342\u03b9',  8087:u'\u03b7\u0314\u0342\u03b9', 
 8088:u'\u03b7\u0313\u03b9',  8089:u'\u03b7\u0314\u03b9',  8090:u'\u03b7\u0313\u0300\u03b9',  8091:u'\u03b7\u0314\u0300\u03b9', 
 8092:u'\u03b7\u0313\u0301\u03b9',  8093:u'\u03b7\u0314\u0301\u03b9',  8094:u'\u03b7\u0313\u0342\u03b9',  8095:u'\u03b7\u0314\u0342\u03b9', 
 8096:u'\u03c9\u0313\u03b9',  8097:u'\u03c9\u0314\u03b9',  8098:u'\u03c9\u0313\u0300\u03b9',  8099:u'\u03c9\u0314\u0300\u03b9', 
 8100:u'\u03c9\u0313\u0301\u03b9',  8101:u'\u03c9\u0314\u0301\u03b9',  8102:u'\u03c9\u0313\u0342\u03b9',  8103:u'\u03c9\u0314\u0342\u03b9', 
 8104:u'\u03c9\u0313\u03b9',  8105:u'\u03c9\u0314\u03b9',  8106:u'\u03c9\u0313\u0300\u03b9',  8107:u'\u03c9\u0314\u0300\u03b9', 
 8108:u'\u03c9\u0313\u0301\u03b9',  8109:u'\u03c9\u0314\u0301\u03b9',  8110:u'\u03c9\u0313\u0342\u03b9',  8111:u'\u03c9\u0314\u0342\u03b9', 
 8114:u'\u03b1\u0300\u03b9',  8115:u'\u03b1\u03b9',  8116:u'\u03b1\u0301\u03b9',  8118:u'\u03b1\u0342', 
 8119:u'\u03b1\u0342\u03b9',  8124:u'\u03b1\u03b9',  8126:u'\u03b9',  8130:u'\u03b7\u0300\u03b9', 
 8131:u'\u03b7\u03b9',  8132:u'\u03b7\u0301\u03b9',  8134:u'\u03b7\u0342',  8135:u'\u03b7\u0342\u03b9', 
 8140:u'\u03b7\u03b9',  8146:u'\u03b9\u0308\u0300',  8147:u'\u03b9\u0308\u0301',  8150:u'\u03b9\u0342', 
 8151:u'\u03b9\u0308\u0342',  8162:u'\u03c5\u0308\u0300',  8163:u'\u03c5\u0308\u0301',  8164:u'\u03c1\u0313', 
 8166:u'\u03c5\u0342',  8167:u'\u03c5\u0308\u0342',  8178:u'\u03c9\u0300\u03b9',  8179:u'\u03c9\u03b9', 
 8180:u'\u03c9\u0301\u03b9',  8182:u'\u03c9\u0342',  8183:u'\u03c9\u0342\u03b9',  8188:u'\u03c9\u03b9', 
 8360:'rs',  8450:'c',  8451:u'\xb0c',  8455:u'\u025b', 
 8457:u'\xb0f',  8459:'h',  8460:'h',  8461:'h', 
 8464:'i',  8465:'i',  8466:'l',  8469:'n', 
 8470:'no',  8473:'p',  8474:'q',  8475:'r', 
 8476:'r',  8477:'r',  8480:'sm',  8481:'tel', 
 8482:'tm',  8484:'z',  8488:'z',  8492:'b', 
 8493:'c',  8496:'e',  8497:'f',  8499:'m', 
 8510:u'\u03b3',  8511:u'\u03c0',  8517:'d',  13169:'hpa', 
 13171:'au',  13173:'ov',  13184:'pa',  13185:'na', 
 13186:u'\u03bca',  13187:'ma',  13188:'ka',  13189:'kb', 
 13190:'mb',  13191:'gb',  13194:'pf',  13195:'nf', 
 13196:u'\u03bcf',  13200:'hz',  13201:'khz',  13202:'mhz', 
 13203:'ghz',  13204:'thz',  13225:'pa',  13226:'kpa', 
 13227:'mpa',  13228:'gpa',  13236:'pv',  13237:'nv', 
 13238:u'\u03bcv',  13239:'mv',  13240:'kv',  13241:'mv', 
 13242:'pw',  13243:'nw',  13244:u'\u03bcw',  13245:'mw', 
 13246:'kw',  13247:'mw',  13248:u'k\u03c9',  13249:u'm\u03c9', 
 13251:'bq',  13254:u'c\u2215kg',  13255:'co.',  13256:'db', 
 13257:'gy',  13259:'hp',  13261:'kk',  13262:'km', 
 13271:'ph',  13273:'ppm',  13274:'pr',  13276:'sv', 
 13277:'wb',  64256:'ff',  64257:'fi',  64258:'fl', 
 64259:'ffi',  64260:'ffl',  64261:'st',  64262:'st', 
 64275:u'\u0574\u0576',  64276:u'\u0574\u0565',  64277:u'\u0574\u056b',  64278:u'\u057e\u0576', 
 64279:u'\u0574\u056d',  119808:'a',  119809:'b',  119810:'c', 
 119811:'d',  119812:'e',  119813:'f',  119814:'g', 
 119815:'h',  119816:'i',  119817:'j',  119818:'k', 
 119819:'l',  119820:'m',  119821:'n',  119822:'o', 
 119823:'p',  119824:'q',  119825:'r',  119826:'s', 
 119827:'t',  119828:'u',  119829:'v',  119830:'w', 
 119831:'x',  119832:'y',  119833:'z',  119860:'a', 
 119861:'b',  119862:'c',  119863:'d',  119864:'e', 
 119865:'f',  119866:'g',  119867:'h',  119868:'i', 
 119869:'j',  119870:'k',  119871:'l',  119872:'m', 
 119873:'n',  119874:'o',  119875:'p',  119876:'q', 
 119877:'r',  119878:'s',  119879:'t',  119880:'u', 
 119881:'v',  119882:'w',  119883:'x',  119884:'y', 
 119885:'z',  119912:'a',  119913:'b',  119914:'c', 
 119915:'d',  119916:'e',  119917:'f',  119918:'g', 
 119919:'h',  119920:'i',  119921:'j',  119922:'k', 
 119923:'l',  119924:'m',  119925:'n',  119926:'o', 
 119927:'p',  119928:'q',  119929:'r',  119930:'s', 
 119931:'t',  119932:'u',  119933:'v',  119934:'w', 
 119935:'x',  119936:'y',  119937:'z',  119964:'a', 
 119966:'c',  119967:'d',  119970:'g',  119973:'j', 
 119974:'k',  119977:'n',  119978:'o',  119979:'p', 
 119980:'q',  119982:'s',  119983:'t',  119984:'u', 
 119985:'v',  119986:'w',  119987:'x',  119988:'y', 
 119989:'z',  120016:'a',  120017:'b',  120018:'c', 
 120019:'d',  120020:'e',  120021:'f',  120022:'g', 
 120023:'h',  120024:'i',  120025:'j',  120026:'k', 
 120027:'l',  120028:'m',  120029:'n',  120030:'o', 
 120031:'p',  120032:'q',  120033:'r',  120034:'s', 
 120035:'t',  120036:'u',  120037:'v',  120038:'w', 
 120039:'x',  120040:'y',  120041:'z',  120068:'a', 
 120069:'b',  120071:'d',  120072:'e',  120073:'f', 
 120074:'g',  120077:'j',  120078:'k',  120079:'l', 
 120080:'m',  120081:'n',  120082:'o',  120083:'p', 
 120084:'q',  120086:'s',  120087:'t',  120088:'u', 
 120089:'v',  120090:'w',  120091:'x',  120092:'y', 
 120120:'a',  120121:'b',  120123:'d',  120124:'e', 
 120125:'f',  120126:'g',  120128:'i',  120129:'j', 
 120130:'k',  120131:'l',  120132:'m',  120134:'o', 
 120138:'s',  120139:'t',  120140:'u',  120141:'v', 
 120142:'w',  120143:'x',  120144:'y',  120172:'a', 
 120173:'b',  120174:'c',  120175:'d',  120176:'e', 
 120177:'f',  120178:'g',  120179:'h',  120180:'i', 
 120181:'j',  120182:'k',  120183:'l',  120184:'m', 
 120185:'n',  120186:'o',  120187:'p',  120188:'q', 
 120189:'r',  120190:'s',  120191:'t',  120192:'u', 
 120193:'v',  120194:'w',  120195:'x',  120196:'y', 
 120197:'z',  120224:'a',  120225:'b',  120226:'c', 
 120227:'d',  120228:'e',  120229:'f',  120230:'g', 
 120231:'h',  120232:'i',  120233:'j',  120234:'k', 
 120235:'l',  120236:'m',  120237:'n',  120238:'o', 
 120239:'p',  120240:'q',  120241:'r',  120242:'s', 
 120243:'t',  120244:'u',  120245:'v',  120246:'w', 
 120247:'x',  120248:'y',  120249:'z',  120276:'a', 
 120277:'b',  120278:'c',  120279:'d',  120280:'e', 
 120281:'f',  120282:'g',  120283:'h',  120284:'i', 
 120285:'j',  120286:'k',  120287:'l',  120288:'m', 
 120289:'n',  120290:'o',  120291:'p',  120292:'q', 
 120293:'r',  120294:'s',  120295:'t',  120296:'u', 
 120297:'v',  120298:'w',  120299:'x',  120300:'y', 
 120301:'z',  120328:'a',  120329:'b',  120330:'c', 
 120331:'d',  120332:'e',  120333:'f',  120334:'g', 
 120335:'h',  120336:'i',  120337:'j',  120338:'k', 
 120339:'l',  120340:'m',  120341:'n',  120342:'o', 
 120343:'p',  120344:'q',  120345:'r',  120346:'s', 
 120347:'t',  120348:'u',  120349:'v',  120350:'w', 
 120351:'x',  120352:'y',  120353:'z',  120380:'a', 
 120381:'b',  120382:'c',  120383:'d',  120384:'e', 
 120385:'f',  120386:'g',  120387:'h',  120388:'i', 
 120389:'j',  120390:'k',  120391:'l',  120392:'m', 
 120393:'n',  120394:'o',  120395:'p',  120396:'q', 
 120397:'r',  120398:'s',  120399:'t',  120400:'u', 
 120401:'v',  120402:'w',  120403:'x',  120404:'y', 
 120405:'z',  120432:'a',  120433:'b',  120434:'c', 
 120435:'d',  120436:'e',  120437:'f',  120438:'g', 
 120439:'h',  120440:'i',  120441:'j',  120442:'k', 
 120443:'l',  120444:'m',  120445:'n',  120446:'o', 
 120447:'p',  120448:'q',  120449:'r',  120450:'s', 
 120451:'t',  120452:'u',  120453:'v',  120454:'w', 
 120455:'x',  120456:'y',  120457:'z',  120488:u'\u03b1', 
 120489:u'\u03b2',  120490:u'\u03b3',  120491:u'\u03b4',  120492:u'\u03b5', 
 120493:u'\u03b6',  120494:u'\u03b7',  120495:u'\u03b8',  120496:u'\u03b9', 
 120497:u'\u03ba',  120498:u'\u03bb',  120499:u'\u03bc',  120500:u'\u03bd', 
 120501:u'\u03be',  120502:u'\u03bf',  120503:u'\u03c0',  120504:u'\u03c1', 
 120505:u'\u03b8',  120506:u'\u03c3',  120507:u'\u03c4',  120508:u'\u03c5', 
 120509:u'\u03c6',  120510:u'\u03c7',  120511:u'\u03c8',  120512:u'\u03c9', 
 120531:u'\u03c3',  120546:u'\u03b1',  120547:u'\u03b2',  120548:u'\u03b3', 
 120549:u'\u03b4',  120550:u'\u03b5',  120551:u'\u03b6',  120552:u'\u03b7', 
 120553:u'\u03b8',  120554:u'\u03b9',  120555:u'\u03ba',  120556:u'\u03bb', 
 120557:u'\u03bc',  120558:u'\u03bd',  120559:u'\u03be',  120560:u'\u03bf', 
 120561:u'\u03c0',  120562:u'\u03c1',  120563:u'\u03b8',  120564:u'\u03c3', 
 120565:u'\u03c4',  120566:u'\u03c5',  120567:u'\u03c6',  120568:u'\u03c7', 
 120569:u'\u03c8',  120570:u'\u03c9',  120589:u'\u03c3',  120604:u'\u03b1', 
 120605:u'\u03b2',  120606:u'\u03b3',  120607:u'\u03b4',  120608:u'\u03b5', 
 120609:u'\u03b6',  120610:u'\u03b7',  120611:u'\u03b8',  120612:u'\u03b9', 
 120613:u'\u03ba',  120614:u'\u03bb',  120615:u'\u03bc',  120616:u'\u03bd', 
 120617:u'\u03be',  120618:u'\u03bf',  120619:u'\u03c0',  120620:u'\u03c1', 
 120621:u'\u03b8',  120622:u'\u03c3',  120623:u'\u03c4',  120624:u'\u03c5', 
 120625:u'\u03c6',  120626:u'\u03c7',  120627:u'\u03c8',  120628:u'\u03c9', 
 120647:u'\u03c3',  120662:u'\u03b1',  120663:u'\u03b2',  120664:u'\u03b3', 
 120665:u'\u03b4',  120666:u'\u03b5',  120667:u'\u03b6',  120668:u'\u03b7', 
 120669:u'\u03b8',  120670:u'\u03b9',  120671:u'\u03ba',  120672:u'\u03bb', 
 120673:u'\u03bc',  120674:u'\u03bd',  120675:u'\u03be',  120676:u'\u03bf', 
 120677:u'\u03c0',  120678:u'\u03c1',  120679:u'\u03b8',  120680:u'\u03c3', 
 120681:u'\u03c4',  120682:u'\u03c5',  120683:u'\u03c6',  120684:u'\u03c7', 
 120685:u'\u03c8',  120686:u'\u03c9',  120705:u'\u03c3',  120720:u'\u03b1', 
 120721:u'\u03b2',  120722:u'\u03b3',  120723:u'\u03b4',  120724:u'\u03b5', 
 120725:u'\u03b6',  120726:u'\u03b7',  120727:u'\u03b8',  120728:u'\u03b9', 
 120729:u'\u03ba',  120730:u'\u03bb',  120731:u'\u03bc',  120732:u'\u03bd', 
 120733:u'\u03be',  120734:u'\u03bf',  120735:u'\u03c0',  120736:u'\u03c1', 
 120737:u'\u03b8',  120738:u'\u03c3',  120739:u'\u03c4',  120740:u'\u03c5', 
 120741:u'\u03c6',  120742:u'\u03c7',  120743:u'\u03c8',  120744:u'\u03c9', 
 120763:u'\u03c3'}

def map_table_b3(code):
    r = b3_exceptions.get(ord(code))
    if r is not None:
        return r
    else:
        return code.lower()


def map_table_b2(a):
    al = map_table_b3(a)
    b = unicodedata.normalize('NFKC', al)
    bl = ''.join([map_table_b3(ch) for ch in b])
    c = unicodedata.normalize('NFKC', bl)
    if b != c:
        return c
    else:
        return al


def in_table_c11(code):
    return code == ' '


def in_table_c12(code):
    return unicodedata.category(code) == 'Zs' and code != ' '


def in_table_c11_c12(code):
    return unicodedata.category(code) == 'Zs'


def in_table_c21(code):
    return ord(code) < 128 and unicodedata.category(code) == 'Cc'


c22_specials = set([1757, 1807, 6158, 8204, 8205, 8232, 8233, 65279] + list(range(8288, 8292)) + list(range(8298, 8304)) + list(range(65529, 65533)) + list(range(119155, 119163)))

def in_table_c22(code):
    c = ord(code)
    if c < 128:
        return False
    elif unicodedata.category(code) == 'Cc':
        return True
    else:
        return c in c22_specials


def in_table_c21_c22(code):
    return unicodedata.category(code) == 'Cc' or ord(code) in c22_specials


def in_table_c3(code):
    return unicodedata.category(code) == 'Co'


def in_table_c4(code):
    c = ord(code)
    if c < 64976:
        return False
    elif c < 65008:
        return True
    else:
        return ord(code) & 65535 in (65534, 65535)


def in_table_c5(code):
    return unicodedata.category(code) == 'Cs'


c6_set = set(range(65529, 65534))

def in_table_c6(code):
    return ord(code) in c6_set


c7_set = set(range(12272, 12284))

def in_table_c7(code):
    return ord(code) in c7_set


c8_set = set([832, 833, 8206, 8207] + list(range(8234, 8239)) + list(range(8298, 8304)))

def in_table_c8(code):
    return ord(code) in c8_set


c9_set = set([917505] + list(range(917536, 917632)))

def in_table_c9(code):
    return ord(code) in c9_set


def in_table_d1(code):
    return unicodedata.bidirectional(code) in ('R', 'AL')


def in_table_d2(code):
    return unicodedata.bidirectional(code) == 'L'